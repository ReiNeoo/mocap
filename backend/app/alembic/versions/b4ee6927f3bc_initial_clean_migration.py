"""Initial clean migration

Revision ID: b4ee6927f3bc
Revises: 
Create Date: 2025-10-20 17:31:28.225003

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel.sql.sqltypes


# revision identifiers, used by Alembic.
revision: str = 'b4ee6927f3bc'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('tenants',
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('max_users', sa.Integer(), nullable=True),
    sa.Column('mongodb_database_name', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('firebase_config', sa.JSON(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_payed', sa.Boolean(), nullable=False),
    sa.Column('city', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('district', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('address', sa.Text(), nullable=True),
    sa.Column('VKN_code', sqlmodel.sql.sqltypes.AutoString(length=10), nullable=True),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('tenant_subscription_plan',
    sa.Column('special_subscription_plan', sa.JSON(), nullable=True),
    sa.Column('subscription_fee', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('starts_at', sa.DateTime(), nullable=True),
    sa.Column('ends_at', sa.DateTime(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('tenant_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('users',
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('first_name', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('last_name', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('turkish_identification_number', sqlmodel.sql.sqltypes.AutoString(length=11), nullable=True),
    sa.Column('avatar_url', sa.Text(), nullable=True),
    sa.Column('firebase_uid', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('email_verified', sa.Boolean(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('phone', sqlmodel.sql.sqltypes.AutoString(length=20), nullable=True),
    sa.Column('city', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('district', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('address', sa.Text(), nullable=True),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('tenant_id', sa.Uuid(), nullable=False),
    sa.Column('password_hash', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('last_login', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('firebase_uid'),
    sa.UniqueConstraint('turkish_identification_number')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_table('parent_student_relations',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('parent_id', sa.Uuid(), nullable=False),
    sa.Column('student_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['parent_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['student_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('student_profiles',
    sa.Column('grade_level', sqlmodel.sql.sqltypes.AutoString(length=20), nullable=True),
    sa.Column('school_name', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('target_school', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('available_study_times', sa.JSON(), nullable=True),
    sa.Column('school_lecture_program', sa.JSON(), nullable=True),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_roles',
    sa.Column('role_type', sa.Enum('STUDENT', 'PARENT', 'TEACHER', 'COACH', 'TENANT_ADMIN', 'SUPER_ADMIN', name='roletype'), nullable=False),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('tenant_id', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_subscription_plan',
    sa.Column('setting_fee', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('sub_level', sa.Enum('FREE', 'GOLD', 'PREMIUM', 'PRO', name='subscriptionlevel'), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('starts_at', sa.DateTime(), nullable=True),
    sa.Column('ends_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('user_subscription_plan')
    op.drop_table('user_roles')
    op.drop_table('student_profiles')
    op.drop_table('parent_student_relations')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_table('tenant_subscription_plan')
    op.drop_table('tenants')
    # ### end Alembic commands ###
